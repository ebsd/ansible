---
- hosts: all
  remote_user: ansible
  gather_facts: no
  become: yes
  become_method: sudo

  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:

##
## user homes list
##  
    - name: get user list
      shell: "getent passwd | awk -F: '{if(($3 >= 1000) && ($3 < 65534)) { print $1 }}'"
      register: users_list

#    - name: print user list
#      debug: var=users_list.stdout_lines

##
## users authorized_keys
##

      # vérifier la présence du fichier authorized_keys dans le home
    - name: check if /home/item/.ssh/authorized_keys exists
      stat:
        path: /home/{{ item  }}/.ssh/authorized_keys
      register: authorized_keys_user_file
      with_items: "{{ users_list.stdout_lines }}"

#    - name: print 
#      debug: var=authorized_keys_user_file

      # obtenir le contenu du fichier authorized_keys
    - name: Get users authorized_keys
      shell: 'cat {{ item.stat.path  }}'
      register: read_key
      with_items: "{{ authorized_keys_user_file.results }}"
      when: item.stat.exists == true

#    - name: Prints out users authorized_keys
#      debug: var=read_key

##
## root authorized_keys
##

    - name: check if /root/.ssh/authorized_keys exists
      stat: 
        path: /root/.ssh/authorized_keys 
      register: authorized_keys_root_file

    - name: Get root authorized_keys
      shell: 'cat /root/.ssh/authorized_keys'
      register: read_rootkey
      when: authorized_keys_root_file.stat.exists == true

#    - name: Prints out root authorized_keys
#      debug: var=read_rootkey

##
## .rhosts
##

      # vérifier la présence du fichier rhosts dans le home
    - name: check if /home/item/.rhosts exists
      stat:
        path: /home/{{ item  }}/.rhosts
      register: dot_rhosts_user_file
      with_items: "{{ users_list.stdout_lines }}"

      # obtenir le contenu du fichier .rhosts
    - name: Get .rhosts content
      shell: 'cat {{ item.stat.path  }}'
      register: read_rhosts
      with_items: "{{ dot_rhosts_user_file.results }}"
      when: item.stat.exists == true

#    - name: Prints out .rhosts
#      debug: var=read_rhosts

##
## .shosts
##

      # vérifier la présence du fichier shosts dans le home
    - name: check if /home/item/.shosts exists
      stat:
        path: /home/{{ item  }}/.shosts
      register: dot_shosts_user_file
      with_items: "{{ users_list.stdout_lines }}"

      # obtenir le contenu du fichier .shosts
    - name: Get .shosts content
      shell: 'cat {{ item.stat.path  }}'
      register: read_shosts
      with_items: "{{ dot_shosts_user_file.results }}"
      when: item.stat.exists == true

#    - name: Prints out .shosts
#      debug: var=read_shosts


##
## /etc/hosts.equiv
##

      # vérifier la présence du fichier shosts dans le home
    - name: check if /etc/hosts.equiv exists
      stat:
        path: /etc/hosts.equiv
      register: etc_hosts_equiv_file

      # obtenir le contenu du fichier
    - name: Get /etc/hosts.equiv content
      shell: 'cat /etc/hosts.equiv'
      register: read_etc_hosts_equiv
      when: etc_hosts_equiv_file.stat.exists == true

#    - name: Prints out .shosts
#      debug: var=read_etc_hosts_equiv


##
## /etc/shosts.equiv
##

      # vérifier la présence du fichier shosts dans le home
    - name: check if /etc/shosts.equiv exists
      stat:
        path: /etc/shosts.equiv
      register: etc_shosts_equiv_file

      # obtenir le contenu du fichier
    - name: Get /etc/shosts.equiv content
      shell: 'cat /etc/shosts.equiv'
      register: read_etc_shosts_equiv
      when: etc_shosts_equiv_file.stat.exists == true

#    - name: Prints out .shosts
#      debug: var=read_etc_shosts_equiv



#    - name: write root authorized_keys 
#      local_action: copy content="{{ read_rootkey.stdout }}" dest="/tmp/auth_keys-root.log"
#      when: authorized_keys_root_file.stat.exists == true

#    - name: write users authorized_keys 
#      local_action: copy content="{{ read_key }}" dest="/tmp/auth_keys.log"

